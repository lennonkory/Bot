%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Kory
%%Title: Window .4328042720.4328043224
%%CreationDate: Sun Oct  4 12:40:59 2015
%%BoundingBox: 57 147 555 645
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font .sfNsText
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply
/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls
/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font .sfNsText
%%EndSetup

%%Page: 1 1
save
306.0 396.0 translate
1 1 scale
-248 -248 translate
0 496 moveto 496 496 lineto 496 0 lineto 0 0 lineto closepath clip newpath
gsave
209 255 translate
/TkPhoto { 
  gsave 
  32 dict begin 
  /tinteger exch def 
  /transparent 1 string def 
  transparent 0 tinteger put 
  /olddict exch def 
  olddict /DataSource get dup type /filetype ne { 
    olddict /DataSource 3 -1 roll 
    0 () /SubFileDecode filter put 
  } { 
    pop 
  } ifelse 
  /newdict olddict maxlength dict def 
  olddict newdict copy pop 
  /w newdict /Width get def 
  /crpp newdict /Decode get length 2 idiv def 
  /str w string def 
  /pix w crpp mul string def 
  /substrlen 2 w log 2 log div floor exp cvi def 
  /substrs [ 
  { 
     substrlen string 
     0 1 substrlen 1 sub { 
       1 index exch tinteger put 
     } for 
     /substrlen substrlen 2 idiv def 
     substrlen 0 eq {exit} if 
  } loop 
  ] def 
  /h newdict /Height get def 
  1 w div 1 h div matrix scale 
  olddict /ImageMatrix get exch matrix concatmatrix 
  matrix invertmatrix concat 
  newdict /Height 1 put 
  newdict /DataSource pix put 
  /mat [w 0 0 h 0 0] def 
  newdict /ImageMatrix mat put 
  0 1 h 1 sub { 
    mat 5 3 -1 roll neg put 
    olddict /DataSource get str readstring pop pop 
    /tail str def 
    /x 0 def 
    olddict /DataSource get pix readstring pop pop 
    { 
      tail transparent search dup /done exch not def 
      {exch pop exch pop} if 
      /w1 exch length def 
      w1 0 ne { 
        newdict /DataSource  pix x crpp mul w1 crpp mul getinterval put 
        newdict /Width w1 put 
        mat 4 x neg put 
        /x x w1 add def 
        newdict image 
        /tail tail w1 tail length w1 sub getinterval def 
      } if 
      done {exit} if 
      tail substrs { 
        anchorsearch {pop} if 
      } forall 
      /tail exch def 
      tail length 0 eq {exit} if 
      /x w tail length sub def 
    } loop 
  } for 
  end 
  grestore 
} bind def 


/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 32
  /Height 32
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 32]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
010101010101FFFFFFFFFFFFFF010101010101FFFFFFFFFFFF0101010101
0101000000000000000000000000000000000000D1D1D1BEBEBEBBBBBBBDBDBD
BDBDBDC3C3C3D3D3D3000000000000000000000000000000000000C1C1C1
BBBBBBBDBDBDBDBDBDBFBFBFCACACA000000000000000000000000000000
000000000000010101010101FFFFFFFFFFFFFF0101010101FFFFFFFFFFFF
FFFF010101010101000000000000000000000000000000000000CBCBCBD6D6D6
D6D6D6D6D6D6D5D5D5D6D6D6C8C8C8000000000000000000000000000000
C4C4C4D5D5D5D6D6D6D6D6D6D6D6D6D5D5D5D5D5D5CDCDCD000000000000
000000000000000000000000010101010101FFFFFFFFFFFFFF0101010101
FFFFFFFFFFFFFFFF010101010101000000000000000000000000000000000000
CFCFCFD5D5D5D5D5D5D6D6D6D6D6D6D6D6D6C9C9C9000000000000000000
000000000000C0C0C0D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6C6C6C6
000000000000000000000000000000000000010101010101FFFFFFFFFFFF
FF0101010101FFFFFFFFFFFFFFFF010101010101000000000000000000000000
000000000000CECECED6D6D6D6D6D6D6D6D6D5D5D5D6D6D6C9C9C9000000
000000000000000000000000C0C0C0D6D6D6D6D6D6D6D6D6D6D6D6D6D6D6
D6D6D6CBCBCB000000000000000000000000000000000000010101010101
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01010101010101000000000000
000000000000000000000000CDCDCDD6D6D6D6D6D6D6D6D6D6D6D6D6D6D6
C5C5C5C7C7C7C9C9C9C7C7C7C5C5C5C4C4C4C0C0C0D6D6D6D6D6D6D6D6D6
D6D6D6D6D6D6D5D5D5000000000000000000000000000000000000000000
010101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF010101
0101000000000000000000000000000000000000C0C0C0C4C8C5C9CCC9CCCDCC
C9C9C9C3C3C3C2C2C2C2C2C2C3C4C3C5C5C5C6C6C6C7C7C7C7C7C7C7C7C7
C7C7C7C8C8C8CACACAC9C9C9C1C1C1BABBBAD2D4D2000000000000000000
0000000000000101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF01010101010000000000000000000000000000008DB6907BA57E7BA67F
7AA67E7AA67D75A5786FA47267A26B62A16760A1655DA1625CA16160A165
5DA1625AA05F63A2676BA36F6FA47375A5797AA67E7CA47E679B69000000
0000000000000000000000000101010101FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF01010101010000000000000000000000000000002B8B32
1A94231B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B9624128A1B
1278160000000000000000000000000000000101010101FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101010101000000000000000000000000
0000000C78141A94231B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B95241B9624
1B96241188190E761200000000000000000000000000000001FFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101010101000000686868
63636366666688898806710E1994221B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241086170D7511000000000000000000000000000000
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF5656565F5F5F606060606060545E5402710B1993221B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96240D82150C66104D4D4D525252545454
515151595959FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF5858586060606060606060605063520072091893211B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96240C8113046E095E605E
6060606060606060605A5A5AFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF5353536060606060606060604B644D007209
1893211B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96240A7E12
056E0A5F605F606060606060606060545454FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF515151606060606060606060
4765490072091893211B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96240A7D10066E0B5F605F606060606060606060525252FFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF565656606060
6060606060604266450072091993221B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B9624087B0E096E0D606060606060606060606060545454
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF6767676060606060606060603E66410072091993221B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B962406790C0C6D10606060606060606060
606060606060FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF6767676060606060606060603B673E0072091993221B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B962405760B0F6D13606060
606060606060606060686868FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFF6A6A6A60606060606060606038673C007209
1994221B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B962404750A
126C16606060606060606060606060676767FFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF767676606060606060606060
3568390072091994221B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B9624037308146C186060606060606060606060606D6D6DFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8080805F5F5F
6060606060603368370072091A94231B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B9624027207156C19606060606060606060606060808080
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFF8787875E5E5E6060606060603269360072091A94231B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B9624017006176B1B606060606060606060
5F5F5F84848401FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF0000005959595F5F5F5E5E5E2F67340072091A94231B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96240170061A691D606060
6060606060605E5E5E9696960101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFF0100000000000081818181818161956501720A
1A94231B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B9624017006
29732D6666664E4E4E4E4E4E5F5F5F0000000101010101FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101010101000000000000000000000000
00000001740A1B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B95240170064294450000000000000000000000000000000101010101FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101010101000000000000
00000000000000000003760C1B96241B95241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B9624017006429445000000000000000000000000000000
0101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF010101
010100000000000000000000000000000003760C1B96241B95241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B9624017006419344000000000000000000
0000000000000101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF010101010100000000000000000000000000000001740A1B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B9624027207469649000000
0000000000000000000000000101010101FFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFF010101010100000000000000000000000000000001720A
1A94231B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B962405760B
5FA4610000000000000000000000000000000101010101FFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101010101000000000000000000000000
00000005760E1B96241B96241B96241B96241B96241B96241B96241B9624
1B96241B96241B96241B96241B96241B96241B96241B96241B96241B9624
1B962403750970AD720000000000000000000000000000000101010101FF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF010101010101000000000000
0000000000000000002A8A31108719128A1B158E1E1791201994221A9423
1B96241B95241B95241B95241B96241B96241B96241B96241B96241B9624
1B96241B96241B962405760B000000000000000000000000000000000000
010101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01010101
01010000000000000000000000000000000000005FA56422842901720A007209
00720901740A03760C05790E077C10097D120A7F130B80140B80140B8014
0A7F130A7E120A80130B80140D82152E8D34000000000000000000000000
000000000000010101010101010101010101FFFFFFFFFFFFFFFFFFFFFF01
0101010101010101000000000000000000000000000000000000000000000000
00000000000000000000000063A8674F9D54318C3725852C0B771204730C
01720A01720A06740E1E81254D9B52000000000000000000000000000000
000000000000000000000000>
grestore
gsave
0 496 moveto
18 478 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
18 478 moveto 5 0 rlineto 0 -5 rlineto -5 0 rlineto closepath
0.000 0.000 1.000 setrgbcolor AdjustColor
fill
18 478 moveto 5 0 rlineto 0 -5 rlineto -5 0 rlineto closepath
0 setlinejoin 2 setlinecap
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
225 271 moveto
255 271 lineto
0 setlinecap
1 setlinejoin
1 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/.sfNsText findfont 13 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
112 384 [
[(Test)]
] 16 -0.5 0.5 0 false DrawText
grestore
restore showpage

%%Trailer
end
%%EOF
